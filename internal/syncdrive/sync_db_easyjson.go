// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package syncdrive

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	aliyunpan "github.com/tickstep/aliyunpan-api/aliyunpan"
	transfer "github.com/tickstep/aliyunpan/library/requester/transfer"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson81f5d30cDecodeGithubComTickstepAliyunpanInternalSyncdrive(in *jlexer.Lexer, out *SyncFileItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action":
			out.Action = SyncFileAction(in.String())
		case "status":
			out.Status = SyncFileStatus(in.String())
		case "localFile":
			if in.IsNull() {
				in.Skip()
				out.LocalFile = nil
			} else {
				if out.LocalFile == nil {
					out.LocalFile = new(LocalFileItem)
				}
				(*out.LocalFile).UnmarshalEasyJSON(in)
			}
		case "panFile":
			if in.IsNull() {
				in.Skip()
				out.PanFile = nil
			} else {
				if out.PanFile == nil {
					out.PanFile = new(PanFileItem)
				}
				(*out.PanFile).UnmarshalEasyJSON(in)
			}
		case "localFolderPath":
			out.LocalFolderPath = string(in.String())
		case "panFolderPath":
			out.PanFolderPath = string(in.String())
		case "statusUpdateTime":
			out.StatusUpdateTime = string(in.String())
		case "driveId":
			out.DriveId = string(in.String())
		case "useInternalUrl":
			out.UseInternalUrl = bool(in.Bool())
		case "downloadRange":
			if in.IsNull() {
				in.Skip()
				out.DownloadRange = nil
			} else {
				if out.DownloadRange == nil {
					out.DownloadRange = new(transfer.Range)
				}
				easyjson81f5d30cDecodeGithubComTickstepAliyunpanLibraryRequesterTransfer(in, out.DownloadRange)
			}
		case "downloadBlockSize":
			out.DownloadBlockSize = int64(in.Int64())
		case "uploadRange":
			if in.IsNull() {
				in.Skip()
				out.UploadRange = nil
			} else {
				if out.UploadRange == nil {
					out.UploadRange = new(transfer.Range)
				}
				easyjson81f5d30cDecodeGithubComTickstepAliyunpanLibraryRequesterTransfer(in, out.UploadRange)
			}
		case "uploadEntity":
			if in.IsNull() {
				in.Skip()
				out.UploadEntity = nil
			} else {
				if out.UploadEntity == nil {
					out.UploadEntity = new(aliyunpan.CreateFileUploadResult)
				}
				easyjson81f5d30cDecodeGithubComTickstepAliyunpanApiAliyunpan(in, out.UploadEntity)
			}
		case "uploadPartSeq":
			out.UploadPartSeq = int(in.Int())
		case "uploadBlockSize":
			out.UploadBlockSize = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson81f5d30cEncodeGithubComTickstepAliyunpanInternalSyncdrive(out *jwriter.Writer, in SyncFileItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix[1:])
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"localFile\":"
		out.RawString(prefix)
		if in.LocalFile == nil {
			out.RawString("null")
		} else {
			(*in.LocalFile).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"panFile\":"
		out.RawString(prefix)
		if in.PanFile == nil {
			out.RawString("null")
		} else {
			(*in.PanFile).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"localFolderPath\":"
		out.RawString(prefix)
		out.String(string(in.LocalFolderPath))
	}
	{
		const prefix string = ",\"panFolderPath\":"
		out.RawString(prefix)
		out.String(string(in.PanFolderPath))
	}
	{
		const prefix string = ",\"statusUpdateTime\":"
		out.RawString(prefix)
		out.String(string(in.StatusUpdateTime))
	}
	{
		const prefix string = ",\"driveId\":"
		out.RawString(prefix)
		out.String(string(in.DriveId))
	}
	{
		const prefix string = ",\"useInternalUrl\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseInternalUrl))
	}
	{
		const prefix string = ",\"downloadRange\":"
		out.RawString(prefix)
		if in.DownloadRange == nil {
			out.RawString("null")
		} else {
			easyjson81f5d30cEncodeGithubComTickstepAliyunpanLibraryRequesterTransfer(out, *in.DownloadRange)
		}
	}
	{
		const prefix string = ",\"downloadBlockSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.DownloadBlockSize))
	}
	{
		const prefix string = ",\"uploadRange\":"
		out.RawString(prefix)
		if in.UploadRange == nil {
			out.RawString("null")
		} else {
			easyjson81f5d30cEncodeGithubComTickstepAliyunpanLibraryRequesterTransfer(out, *in.UploadRange)
		}
	}
	{
		const prefix string = ",\"uploadEntity\":"
		out.RawString(prefix)
		if in.UploadEntity == nil {
			out.RawString("null")
		} else {
			easyjson81f5d30cEncodeGithubComTickstepAliyunpanApiAliyunpan(out, *in.UploadEntity)
		}
	}
	{
		const prefix string = ",\"uploadPartSeq\":"
		out.RawString(prefix)
		out.Int(int(in.UploadPartSeq))
	}
	{
		const prefix string = ",\"uploadBlockSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.UploadBlockSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SyncFileItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson81f5d30cEncodeGithubComTickstepAliyunpanInternalSyncdrive(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SyncFileItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson81f5d30cEncodeGithubComTickstepAliyunpanInternalSyncdrive(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SyncFileItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson81f5d30cDecodeGithubComTickstepAliyunpanInternalSyncdrive(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SyncFileItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson81f5d30cDecodeGithubComTickstepAliyunpanInternalSyncdrive(l, v)
}
func easyjson81f5d30cDecodeGithubComTickstepAliyunpanApiAliyunpan(in *jlexer.Lexer, out *aliyunpan.CreateFileUploadResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parent_file_id":
			out.ParentFileId = string(in.String())
		case "part_info_list":
			if in.IsNull() {
				in.Skip()
				out.PartInfoList = nil
			} else {
				in.Delim('[')
				if out.PartInfoList == nil {
					if !in.IsDelim(']') {
						out.PartInfoList = make([]aliyunpan.FileUploadPartInfoResult, 0, 1)
					} else {
						out.PartInfoList = []aliyunpan.FileUploadPartInfoResult{}
					}
				} else {
					out.PartInfoList = (out.PartInfoList)[:0]
				}
				for !in.IsDelim(']') {
					var v1 aliyunpan.FileUploadPartInfoResult
					easyjson81f5d30cDecodeGithubComTickstepAliyunpanApiAliyunpan1(in, &v1)
					out.PartInfoList = append(out.PartInfoList, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "upload_id":
			out.UploadId = string(in.String())
		case "rapid_upload":
			out.RapidUpload = bool(in.Bool())
		case "type":
			out.Type = string(in.String())
		case "file_id":
			out.FileId = string(in.String())
		case "domain_id":
			out.DomainId = string(in.String())
		case "drive_id":
			out.DriveId = string(in.String())
		case "file_name":
			out.FileName = string(in.String())
		case "encrypt_mode":
			out.EncryptMode = string(in.String())
		case "location":
			out.Location = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson81f5d30cEncodeGithubComTickstepAliyunpanApiAliyunpan(out *jwriter.Writer, in aliyunpan.CreateFileUploadResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"parent_file_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ParentFileId))
	}
	{
		const prefix string = ",\"part_info_list\":"
		out.RawString(prefix)
		if in.PartInfoList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.PartInfoList {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson81f5d30cEncodeGithubComTickstepAliyunpanApiAliyunpan1(out, v3)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"upload_id\":"
		out.RawString(prefix)
		out.String(string(in.UploadId))
	}
	{
		const prefix string = ",\"rapid_upload\":"
		out.RawString(prefix)
		out.Bool(bool(in.RapidUpload))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"file_id\":"
		out.RawString(prefix)
		out.String(string(in.FileId))
	}
	{
		const prefix string = ",\"domain_id\":"
		out.RawString(prefix)
		out.String(string(in.DomainId))
	}
	{
		const prefix string = ",\"drive_id\":"
		out.RawString(prefix)
		out.String(string(in.DriveId))
	}
	{
		const prefix string = ",\"file_name\":"
		out.RawString(prefix)
		out.String(string(in.FileName))
	}
	{
		const prefix string = ",\"encrypt_mode\":"
		out.RawString(prefix)
		out.String(string(in.EncryptMode))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	out.RawByte('}')
}
func easyjson81f5d30cDecodeGithubComTickstepAliyunpanApiAliyunpan1(in *jlexer.Lexer, out *aliyunpan.FileUploadPartInfoResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "part_number":
			out.PartNumber = int(in.Int())
		case "upload_url":
			out.UploadURL = string(in.String())
		case "internal_upload_url":
			out.InternalUploadURL = string(in.String())
		case "content_type":
			out.ContentType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson81f5d30cEncodeGithubComTickstepAliyunpanApiAliyunpan1(out *jwriter.Writer, in aliyunpan.FileUploadPartInfoResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"part_number\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PartNumber))
	}
	{
		const prefix string = ",\"upload_url\":"
		out.RawString(prefix)
		out.String(string(in.UploadURL))
	}
	{
		const prefix string = ",\"internal_upload_url\":"
		out.RawString(prefix)
		out.String(string(in.InternalUploadURL))
	}
	{
		const prefix string = ",\"content_type\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	out.RawByte('}')
}
func easyjson81f5d30cDecodeGithubComTickstepAliyunpanLibraryRequesterTransfer(in *jlexer.Lexer, out *transfer.Range) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "begin":
			out.Begin = int64(in.Int64())
		case "end":
			out.End = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson81f5d30cEncodeGithubComTickstepAliyunpanLibraryRequesterTransfer(out *jwriter.Writer, in transfer.Range) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Begin != 0 {
		const prefix string = ",\"begin\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Begin))
	}
	if in.End != 0 {
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.End))
	}
	out.RawByte('}')
}
func easyjson81f5d30cDecodeGithubComTickstepAliyunpanInternalSyncdrive1(in *jlexer.Lexer, out *PanFileItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "driveId":
			out.DriveId = string(in.String())
		case "domainId":
			out.DomainId = string(in.String())
		case "fileId":
			out.FileId = string(in.String())
		case "fileName":
			out.FileName = string(in.String())
		case "fileSize":
			out.FileSize = int64(in.Int64())
		case "fileType":
			out.FileType = string(in.String())
		case "createdAt":
			out.CreatedAt = string(in.String())
		case "updatedAt":
			out.UpdatedAt = string(in.String())
		case "fileExtension":
			out.FileExtension = string(in.String())
		case "uploadId":
			out.UploadId = string(in.String())
		case "parentFileId":
			out.ParentFileId = string(in.String())
		case "crc64Hash":
			out.Crc64Hash = string(in.String())
		case "sha1Hash":
			out.Sha1Hash = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "scanTimeAt":
			out.ScanTimeAt = string(in.String())
		case "scanStatus":
			out.ScanStatus = ScanStatus(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson81f5d30cEncodeGithubComTickstepAliyunpanInternalSyncdrive1(out *jwriter.Writer, in PanFileItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"driveId\":"
		out.RawString(prefix[1:])
		out.String(string(in.DriveId))
	}
	{
		const prefix string = ",\"domainId\":"
		out.RawString(prefix)
		out.String(string(in.DomainId))
	}
	{
		const prefix string = ",\"fileId\":"
		out.RawString(prefix)
		out.String(string(in.FileId))
	}
	{
		const prefix string = ",\"fileName\":"
		out.RawString(prefix)
		out.String(string(in.FileName))
	}
	{
		const prefix string = ",\"fileSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.FileSize))
	}
	{
		const prefix string = ",\"fileType\":"
		out.RawString(prefix)
		out.String(string(in.FileType))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"fileExtension\":"
		out.RawString(prefix)
		out.String(string(in.FileExtension))
	}
	{
		const prefix string = ",\"uploadId\":"
		out.RawString(prefix)
		out.String(string(in.UploadId))
	}
	{
		const prefix string = ",\"parentFileId\":"
		out.RawString(prefix)
		out.String(string(in.ParentFileId))
	}
	{
		const prefix string = ",\"crc64Hash\":"
		out.RawString(prefix)
		out.String(string(in.Crc64Hash))
	}
	{
		const prefix string = ",\"sha1Hash\":"
		out.RawString(prefix)
		out.String(string(in.Sha1Hash))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"scanTimeAt\":"
		out.RawString(prefix)
		out.String(string(in.ScanTimeAt))
	}
	{
		const prefix string = ",\"scanStatus\":"
		out.RawString(prefix)
		out.String(string(in.ScanStatus))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PanFileItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson81f5d30cEncodeGithubComTickstepAliyunpanInternalSyncdrive1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PanFileItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson81f5d30cEncodeGithubComTickstepAliyunpanInternalSyncdrive1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PanFileItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson81f5d30cDecodeGithubComTickstepAliyunpanInternalSyncdrive1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PanFileItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson81f5d30cDecodeGithubComTickstepAliyunpanInternalSyncdrive1(l, v)
}
func easyjson81f5d30cDecodeGithubComTickstepAliyunpanInternalSyncdrive2(in *jlexer.Lexer, out *LocalFileItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fileName":
			out.FileName = string(in.String())
		case "fileSize":
			out.FileSize = int64(in.Int64())
		case "fileType":
			out.FileType = string(in.String())
		case "createdAt":
			out.CreatedAt = string(in.String())
		case "updatedAt":
			out.UpdatedAt = string(in.String())
		case "fileExtension":
			out.FileExtension = string(in.String())
		case "sha1Hash":
			out.Sha1Hash = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "scanTimeAt":
			out.ScanTimeAt = string(in.String())
		case "scanStatus":
			out.ScanStatus = ScanStatus(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson81f5d30cEncodeGithubComTickstepAliyunpanInternalSyncdrive2(out *jwriter.Writer, in LocalFileItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fileName\":"
		out.RawString(prefix[1:])
		out.String(string(in.FileName))
	}
	{
		const prefix string = ",\"fileSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.FileSize))
	}
	{
		const prefix string = ",\"fileType\":"
		out.RawString(prefix)
		out.String(string(in.FileType))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"fileExtension\":"
		out.RawString(prefix)
		out.String(string(in.FileExtension))
	}
	{
		const prefix string = ",\"sha1Hash\":"
		out.RawString(prefix)
		out.String(string(in.Sha1Hash))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"scanTimeAt\":"
		out.RawString(prefix)
		out.String(string(in.ScanTimeAt))
	}
	{
		const prefix string = ",\"scanStatus\":"
		out.RawString(prefix)
		out.String(string(in.ScanStatus))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalFileItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson81f5d30cEncodeGithubComTickstepAliyunpanInternalSyncdrive2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalFileItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson81f5d30cEncodeGithubComTickstepAliyunpanInternalSyncdrive2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalFileItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson81f5d30cDecodeGithubComTickstepAliyunpanInternalSyncdrive2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalFileItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson81f5d30cDecodeGithubComTickstepAliyunpanInternalSyncdrive2(l, v)
}
